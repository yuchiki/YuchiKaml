// 2-tuple definition
let makeTuple a b condition = if condition then a else b in
let fst t = t true in
let snd t = t false in

// list definition
(* We have no ADT, so using string literal "nil" for a nil tag of ADT. *) let Nil = "nil" in
let isNil l = l == Nil in
let Cons x xs =
    makeTuple x xs in

// higher order functions over list
let rec map f l =
    if isNil l then Nil
    else
        let car = fst l in
        let cdr = snd l in
        Cons (f car) (map f cdr) in

let rec fold i f l =
    if isNil l then i
    else
        let car = fst l in
        let cdr = snd l in
        fold (f i car) f cdr in

let rec filter f l =
    if isNil l then Nil
    else
        let car = fst l in
        let cdr = snd l in
        if f car then Cons car (filter f cdr)
        else filter f cdr in

let rec range minValue maxValue =
    if minValue > maxValue then Nil
    else Cons minValue (range (minValue + 1) maxValue) in
